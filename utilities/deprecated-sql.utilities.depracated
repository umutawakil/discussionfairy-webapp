var sql = require("mysql")
var pool  = undefined

module.exports.setSQL = function(x){
  sql = x
}

module.exports.createConnectionPool = function(){
  var config = {
     connectionLimit : 10,
     host            : process.env.DatabaseHostNam,
     port            : process.env.RDSPort,
     user            : process.env.MasterUsername,
     password        : process.env.MasterUserPassword,
     database        : "discussionfairy"
   }
   pool  = sql.createPool(config);
   console.log("\r\nConfig:\r\n")
   console.log(JSON.stringify(config))
}

module.exports.runQuery = function(x){
  this.getConnection().then(connection=>{
    connection.query(sql,function (error, results, fields) {
      if (error) {
          return Promise.reject(error)
      } else {
        console.log(JSON.stringify(results))
        return Promise.resolve(results)
      }
    })
  })
}

module.exports.getConnection = function(){
  var promise = new Promise((resolve,reject)=>{
    pool.getConnection(function(err, connection) {
      if(err){
        reject(err)
      } else {
        resolve(connection)
      }
    })
  })
  return promise
}

module.exports.prepared = function(queryString,values) {
  return this.getConnection()
  .then(connection=>{

    var sqlQuery = sql.format(queryString, values);

    return  connection.query(sqlQuery,function (error, results, fields) {
          if (error) {
              Promise.reject(error)
          } else {
            return Promise.resolve(results)
          }
        })
  })
}

module.exports.replace = insert
function insert(connection,table,object){
  var promise = new Promise((resolve,reject)=>{

    var queryString = ""
    var inserts     = []
    for (var key in object) {
    if (object.hasOwnProperty(key)) {
          queryString +=" "+key+ " = ?,"
          inserts.push(object[key])
      }
    }
    queryString = queryString.substring(0, queryString.length - 1);
    queryString = "REPLACE INTO "+table+" SET"+queryString
    //console.log(queryString)
    sqlQuery = sql.format(queryString, inserts);
    //console.log(JSON.stringify(sqlQuery))

    connection.query(sql,function (error, results, fields) {
      if (error) {
        return connection.rollback(function() {
          throw error;
        })
      }
      resolve()
    })
  })
  return promise
}

module.exports.createTransaction = function(connection,callback){
  var promise = new Promise((resolve,reject)=>{
    connection.beginTransaction(initialError=>{
      if (initialError) { throw initialError; }
        resolve(callback())
    })
  })
  return promise
}

/*module.exports.insertMultiple = function(connection,table,objects) {
    var promises = []
    objects.forEach(function(x){
      promises.push(insert(connection,table,x))
    })

    return Promise.all(promises).then(()=>{
      return commit(connection)
    })
}*/

module.exports.commit = commit

function commit(connection){
  var promise = new Promise((resolve,reject)=>{
    connection.commit(function(err) {
      if (err) {
        return connection.rollback(function() {
          throw err
        })
      }
      resolve()
    })
  })
  return promise
}
